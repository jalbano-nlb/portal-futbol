/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter } from '@angular/core';
import { NbComponentSize } from '../component-size';
import { NbComponentStatus } from '../component-status';
/**
 * Alert component.
 *
 * Basic alert example:
 * @stacked-example(Showcase, alert/alert-showcase.component)
 *
 * Alert configuration:
 *
 * ```html
 * <nb-alert status="success">
 *   You have been successfully authenticated!
 * </nb-alert>
 * ```
 * ### Installation
 *
 * Import `NbAlertModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbAlertModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Alert could additionally have a `close` button when `closable` property is set:
 * ```html
 * <nb-alert status="success" closable (close)="onClose()">
 *   You have been successfully authenticated!
 * </nb-alert>
 * ```
 *
 * Colored alerts could be simply configured by providing a `status` property:
 * @stacked-example(Alert status, alert/alert-colors.component)
 *
 * It is also possible to assign an `accent` property for a slight alert highlight
 * as well as combine it with `status`:
 * @stacked-example(Alert accent, alert/alert-accents.component)
 *
 * And `outline` property:
 * @stacked-example(Outline Alert, alert/alert-outline.component)
 *
 * @additional-example(Multiple Sizes, alert/alert-sizes.component)
 *
 * @styles
 *
 * alert-border-radius:
 * alert-bottom-margin:
 * alert-padding:
 * alert-scrollbar-color:
 * alert-scrollbar-background-color:
 * alert-scrollbar-width:
 * alert-shadow:
 * alert-text-font-family:
 * alert-text-font-size:
 * alert-text-font-weight:
 * alert-text-line-height:
 * alert-closable-start-padding:
 * alert-tiny-height:
 * alert-small-height:
 * alert-medium-height:
 * alert-medium-padding:
 * alert-large-height:
 * alert-giant-height:
 * alert-basic-background-color:
 * alert-basic-text-color:
 * alert-primary-background-color:
 * alert-primary-text-color:
 * alert-success-background-color:
 * alert-success-text-color:
 * alert-info-background-color:
 * alert-info-text-color:
 * alert-warning-background-color:
 * alert-warning-text-color:
 * alert-danger-background-color:
 * alert-danger-text-color:
 * alert-control-background-color:
 * alert-control-text-color:
 * alert-accent-basic-color:
 * alert-accent-primary-color:
 * alert-accent-info-color:
 * alert-accent-success-color:
 * alert-accent-warning-color:
 * alert-accent-danger-color:
 * alert-accent-control-color:
 * alert-outline-width:
 * alert-outline-basic-color:
 * alert-outline-primary-color:
 * alert-outline-info-color:
 * alert-outline-success-color:
 * alert-outline-warning-color:
 * alert-outline-danger-color:
 * alert-outline-control-color:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbAlertComponent {
    /**
     * Alert size, available sizes:
     * `tiny`, `small`, `medium`, `large`, `giant`
     * Unset by default.
     */
    size: '' | NbComponentSize;
    /**
     * Alert status (adds specific styles):
     * `basic` (default), `primary`, `success`, `info`, `warning`, `danger`, `control`.
     */
    status: NbComponentStatus;
    protected _status: NbComponentStatus;
    /**
     * Alert accent (color of the top border):
     * `basic`, `primary`, `success`, `info`, `warning`, `danger`, `control`.
     * Unset by default.
     */
    accent: '' | NbComponentStatus;
    /**
     * Alert outline (color of the border):
     * `basic`, `primary`, `success`, `info`, `warning`, `danger`, `control`.
     * Unset by default.
     */
    outline: '' | NbComponentStatus;
    /**
     * Shows `close` icon
     */
    closable: boolean;
    protected _closable: boolean;
    /**
     * Emits when chip is removed
     * @type EventEmitter<any>
     */
    close: EventEmitter<{}>;
    /**
     * Emits the removed chip event
     */
    onClose(): void;
    readonly tiny: boolean;
    readonly small: boolean;
    readonly medium: boolean;
    readonly large: boolean;
    readonly giant: boolean;
    readonly primary: boolean;
    readonly success: boolean;
    readonly info: boolean;
    readonly warning: boolean;
    readonly danger: boolean;
    readonly basic: boolean;
    readonly control: boolean;
    readonly primaryAccent: boolean;
    readonly successAccent: boolean;
    readonly infoAccent: boolean;
    readonly warningAccent: boolean;
    readonly dangerAccent: boolean;
    readonly basicAccent: boolean;
    readonly controlAccent: boolean;
    readonly primaryOutline: boolean;
    readonly successOutline: boolean;
    readonly infoOutline: boolean;
    readonly warningOutline: boolean;
    readonly dangerOutline: boolean;
    readonly basicOutline: boolean;
    readonly controlOutline: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAlertComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbAlertComponent, "nb-alert", never, {
    "size": "size";
    "accent": "accent";
    "outline": "outline";
    "status": "status";
    "closable": "closable";
}, {
    "close": "close";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFsZXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3R0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlFQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJDb21wb25lbnRTaXplIH0gZnJvbSAnLi4vY29tcG9uZW50LXNpemUnO1xuaW1wb3J0IHsgTmJDb21wb25lbnRTdGF0dXMgfSBmcm9tICcuLi9jb21wb25lbnQtc3RhdHVzJztcbi8qKlxuICogQWxlcnQgY29tcG9uZW50LlxuICpcbiAqIEJhc2ljIGFsZXJ0IGV4YW1wbGU6XG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCBhbGVydC9hbGVydC1zaG93Y2FzZS5jb21wb25lbnQpXG4gKlxuICogQWxlcnQgY29uZmlndXJhdGlvbjpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmItYWxlcnQgc3RhdHVzPVwic3VjY2Vzc1wiPlxuICogICBZb3UgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBhdXRoZW50aWNhdGVkIVxuICogPC9uYi1hbGVydD5cbiAqIGBgYFxuICogIyMjIEluc3RhbGxhdGlvblxuICpcbiAqIEltcG9ydCBgTmJBbGVydE1vZHVsZWAgdG8geW91ciBmZWF0dXJlIG1vZHVsZS5cbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJBbGVydE1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgUGFnZU1vZHVsZSB7IH1cbiAqIGBgYFxuICogIyMjIFVzYWdlXG4gKlxuICogQWxlcnQgY291bGQgYWRkaXRpb25hbGx5IGhhdmUgYSBgY2xvc2VgIGJ1dHRvbiB3aGVuIGBjbG9zYWJsZWAgcHJvcGVydHkgaXMgc2V0OlxuICogYGBgaHRtbFxuICogPG5iLWFsZXJ0IHN0YXR1cz1cInN1Y2Nlc3NcIiBjbG9zYWJsZSAoY2xvc2UpPVwib25DbG9zZSgpXCI+XG4gKiAgIFlvdSBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQhXG4gKiA8L25iLWFsZXJ0PlxuICogYGBgXG4gKlxuICogQ29sb3JlZCBhbGVydHMgY291bGQgYmUgc2ltcGx5IGNvbmZpZ3VyZWQgYnkgcHJvdmlkaW5nIGEgYHN0YXR1c2AgcHJvcGVydHk6XG4gKiBAc3RhY2tlZC1leGFtcGxlKEFsZXJ0IHN0YXR1cywgYWxlcnQvYWxlcnQtY29sb3JzLmNvbXBvbmVudClcbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIGFzc2lnbiBhbiBgYWNjZW50YCBwcm9wZXJ0eSBmb3IgYSBzbGlnaHQgYWxlcnQgaGlnaGxpZ2h0XG4gKiBhcyB3ZWxsIGFzIGNvbWJpbmUgaXQgd2l0aCBgc3RhdHVzYDpcbiAqIEBzdGFja2VkLWV4YW1wbGUoQWxlcnQgYWNjZW50LCBhbGVydC9hbGVydC1hY2NlbnRzLmNvbXBvbmVudClcbiAqXG4gKiBBbmQgYG91dGxpbmVgIHByb3BlcnR5OlxuICogQHN0YWNrZWQtZXhhbXBsZShPdXRsaW5lIEFsZXJ0LCBhbGVydC9hbGVydC1vdXRsaW5lLmNvbXBvbmVudClcbiAqXG4gKiBAYWRkaXRpb25hbC1leGFtcGxlKE11bHRpcGxlIFNpemVzLCBhbGVydC9hbGVydC1zaXplcy5jb21wb25lbnQpXG4gKlxuICogQHN0eWxlc1xuICpcbiAqIGFsZXJ0LWJvcmRlci1yYWRpdXM6XG4gKiBhbGVydC1ib3R0b20tbWFyZ2luOlxuICogYWxlcnQtcGFkZGluZzpcbiAqIGFsZXJ0LXNjcm9sbGJhci1jb2xvcjpcbiAqIGFsZXJ0LXNjcm9sbGJhci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogYWxlcnQtc2Nyb2xsYmFyLXdpZHRoOlxuICogYWxlcnQtc2hhZG93OlxuICogYWxlcnQtdGV4dC1mb250LWZhbWlseTpcbiAqIGFsZXJ0LXRleHQtZm9udC1zaXplOlxuICogYWxlcnQtdGV4dC1mb250LXdlaWdodDpcbiAqIGFsZXJ0LXRleHQtbGluZS1oZWlnaHQ6XG4gKiBhbGVydC1jbG9zYWJsZS1zdGFydC1wYWRkaW5nOlxuICogYWxlcnQtdGlueS1oZWlnaHQ6XG4gKiBhbGVydC1zbWFsbC1oZWlnaHQ6XG4gKiBhbGVydC1tZWRpdW0taGVpZ2h0OlxuICogYWxlcnQtbWVkaXVtLXBhZGRpbmc6XG4gKiBhbGVydC1sYXJnZS1oZWlnaHQ6XG4gKiBhbGVydC1naWFudC1oZWlnaHQ6XG4gKiBhbGVydC1iYXNpYy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogYWxlcnQtYmFzaWMtdGV4dC1jb2xvcjpcbiAqIGFsZXJ0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvcjpcbiAqIGFsZXJ0LXByaW1hcnktdGV4dC1jb2xvcjpcbiAqIGFsZXJ0LXN1Y2Nlc3MtYmFja2dyb3VuZC1jb2xvcjpcbiAqIGFsZXJ0LXN1Y2Nlc3MtdGV4dC1jb2xvcjpcbiAqIGFsZXJ0LWluZm8tYmFja2dyb3VuZC1jb2xvcjpcbiAqIGFsZXJ0LWluZm8tdGV4dC1jb2xvcjpcbiAqIGFsZXJ0LXdhcm5pbmctYmFja2dyb3VuZC1jb2xvcjpcbiAqIGFsZXJ0LXdhcm5pbmctdGV4dC1jb2xvcjpcbiAqIGFsZXJ0LWRhbmdlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogYWxlcnQtZGFuZ2VyLXRleHQtY29sb3I6XG4gKiBhbGVydC1jb250cm9sLWJhY2tncm91bmQtY29sb3I6XG4gKiBhbGVydC1jb250cm9sLXRleHQtY29sb3I6XG4gKiBhbGVydC1hY2NlbnQtYmFzaWMtY29sb3I6XG4gKiBhbGVydC1hY2NlbnQtcHJpbWFyeS1jb2xvcjpcbiAqIGFsZXJ0LWFjY2VudC1pbmZvLWNvbG9yOlxuICogYWxlcnQtYWNjZW50LXN1Y2Nlc3MtY29sb3I6XG4gKiBhbGVydC1hY2NlbnQtd2FybmluZy1jb2xvcjpcbiAqIGFsZXJ0LWFjY2VudC1kYW5nZXItY29sb3I6XG4gKiBhbGVydC1hY2NlbnQtY29udHJvbC1jb2xvcjpcbiAqIGFsZXJ0LW91dGxpbmUtd2lkdGg6XG4gKiBhbGVydC1vdXRsaW5lLWJhc2ljLWNvbG9yOlxuICogYWxlcnQtb3V0bGluZS1wcmltYXJ5LWNvbG9yOlxuICogYWxlcnQtb3V0bGluZS1pbmZvLWNvbG9yOlxuICogYWxlcnQtb3V0bGluZS1zdWNjZXNzLWNvbG9yOlxuICogYWxlcnQtb3V0bGluZS13YXJuaW5nLWNvbG9yOlxuICogYWxlcnQtb3V0bGluZS1kYW5nZXItY29sb3I6XG4gKiBhbGVydC1vdXRsaW5lLWNvbnRyb2wtY29sb3I6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iQWxlcnRDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIEFsZXJ0IHNpemUsIGF2YWlsYWJsZSBzaXplczpcbiAgICAgKiBgdGlueWAsIGBzbWFsbGAsIGBtZWRpdW1gLCBgbGFyZ2VgLCBgZ2lhbnRgXG4gICAgICogVW5zZXQgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBzaXplOiAnJyB8IE5iQ29tcG9uZW50U2l6ZTtcbiAgICAvKipcbiAgICAgKiBBbGVydCBzdGF0dXMgKGFkZHMgc3BlY2lmaWMgc3R5bGVzKTpcbiAgICAgKiBgYmFzaWNgIChkZWZhdWx0KSwgYHByaW1hcnlgLCBgc3VjY2Vzc2AsIGBpbmZvYCwgYHdhcm5pbmdgLCBgZGFuZ2VyYCwgYGNvbnRyb2xgLlxuICAgICAqL1xuICAgIHN0YXR1czogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgcHJvdGVjdGVkIF9zdGF0dXM6IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIC8qKlxuICAgICAqIEFsZXJ0IGFjY2VudCAoY29sb3Igb2YgdGhlIHRvcCBib3JkZXIpOlxuICAgICAqIGBiYXNpY2AsIGBwcmltYXJ5YCwgYHN1Y2Nlc3NgLCBgaW5mb2AsIGB3YXJuaW5nYCwgYGRhbmdlcmAsIGBjb250cm9sYC5cbiAgICAgKiBVbnNldCBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIGFjY2VudDogJycgfCBOYkNvbXBvbmVudFN0YXR1cztcbiAgICAvKipcbiAgICAgKiBBbGVydCBvdXRsaW5lIChjb2xvciBvZiB0aGUgYm9yZGVyKTpcbiAgICAgKiBgYmFzaWNgLCBgcHJpbWFyeWAsIGBzdWNjZXNzYCwgYGluZm9gLCBgd2FybmluZ2AsIGBkYW5nZXJgLCBgY29udHJvbGAuXG4gICAgICogVW5zZXQgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBvdXRsaW5lOiAnJyB8IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIC8qKlxuICAgICAqIFNob3dzIGBjbG9zZWAgaWNvblxuICAgICAqL1xuICAgIGNsb3NhYmxlOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfY2xvc2FibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRW1pdHMgd2hlbiBjaGlwIGlzIHJlbW92ZWRcbiAgICAgKiBAdHlwZSBFdmVudEVtaXR0ZXI8YW55PlxuICAgICAqL1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHRoZSByZW1vdmVkIGNoaXAgZXZlbnRcbiAgICAgKi9cbiAgICBvbkNsb3NlKCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgdGlueTogYm9vbGVhbjtcbiAgICByZWFkb25seSBzbWFsbDogYm9vbGVhbjtcbiAgICByZWFkb25seSBtZWRpdW06IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbGFyZ2U6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZ2lhbnQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgcHJpbWFyeTogYm9vbGVhbjtcbiAgICByZWFkb25seSBzdWNjZXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGluZm86IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgd2FybmluZzogYm9vbGVhbjtcbiAgICByZWFkb25seSBkYW5nZXI6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgYmFzaWM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY29udHJvbDogYm9vbGVhbjtcbiAgICByZWFkb25seSBwcmltYXJ5QWNjZW50OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHN1Y2Nlc3NBY2NlbnQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaW5mb0FjY2VudDogYm9vbGVhbjtcbiAgICByZWFkb25seSB3YXJuaW5nQWNjZW50OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRhbmdlckFjY2VudDogYm9vbGVhbjtcbiAgICByZWFkb25seSBiYXNpY0FjY2VudDogYm9vbGVhbjtcbiAgICByZWFkb25seSBjb250cm9sQWNjZW50OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHByaW1hcnlPdXRsaW5lOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHN1Y2Nlc3NPdXRsaW5lOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGluZm9PdXRsaW5lOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHdhcm5pbmdPdXRsaW5lOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRhbmdlck91dGxpbmU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgYmFzaWNPdXRsaW5lOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNvbnRyb2xPdXRsaW5lOiBib29sZWFuO1xufVxuIl19