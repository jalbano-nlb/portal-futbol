/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
/**
 * Chat message component.
 *
 * Multiple message types are available through a `type` property, such as
 * - text - simple text message
 * - file - could be a file preview or a file icon
 * if multiple files are provided grouped files are shown
 * - quote - quotes a message with specific quote styles
 * - map - shows a google map picture by provided [latitude] and [longitude] properties
 *
 * @stacked-example(Available Types, chat/chat-message-types-showcase.component)
 *
 * Message with attached files:
 * ```html
 * <nb-chat-message
 *   type="file"
 *   [files]="[ { url: '...' } ]"
 *   message="Hello world!">
 * </nb-chat-message>
 * ```
 *
 * Map message:
 * ```html
 * <nb-chat-message
 *   type="map"
 *   [latitude]="53.914"
 *   [longitude]="27.59"
 *   message="Here I am">
 * </nb-chat-message>
 * ```
 *
 * @styles
 *
 * chat-message-background:
 * chat-message-text-color:
 * chat-message-reply-background-color:
 * chat-message-reply-text-color:
 * chat-message-avatar-background-color:
 * chat-message-sender-text-color:
 * chat-message-quote-background-color:
 * chat-message-quote-text-color:
 * chat-message-file-text-color:
 * chat-message-file-background-color:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbChatMessageComponent {
    protected domSanitizer: DomSanitizer;
    readonly flyInOut: boolean;
    readonly notReply: boolean;
    avatarStyle: SafeStyle;
    /**
     * Determines if a message is a reply
     */
    reply: boolean;
    protected _reply: boolean;
    /**
     * Message sender
     * @type {string}
     */
    message: string;
    /**
     * Message sender
     * @type {string}
     */
    sender: string;
    /**
     * Message send date
     * @type {Date}
     */
    date: Date;
    /**
     * Array of files `{ url: 'file url', icon: 'file icon class' }`
     * @type {string}
     */
    files: {
        url: string;
        icon: string;
    }[];
    /**
     * Quoted message text
     * @type {string}
     */
    quote: string;
    /**
     * Map latitude
     * @type {number}
     */
    latitude: number;
    /**
     * Map longitude
     * @type {number}
     */
    longitude: number;
    /**
     * Message send avatar
     * @type {string}
     */
    avatar: string;
    /**
     * Message type, available options `text|file|map|quote`
     * @type {string}
     */
    type: string;
    constructor(domSanitizer: DomSanitizer);
    getInitials(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbChatMessageComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbChatMessageComponent, "nb-chat-message", never, {
    "reply": "reply";
    "avatar": "avatar";
    "message": "message";
    "sender": "sender";
    "date": "date";
    "files": "files";
    "quote": "quote";
    "latitude": "latitude";
    "longitude": "longitude";
    "type": "type";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC1tZXNzYWdlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjaGF0LW1lc3NhZ2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtEQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTREQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG4vKipcbiAqIENoYXQgbWVzc2FnZSBjb21wb25lbnQuXG4gKlxuICogTXVsdGlwbGUgbWVzc2FnZSB0eXBlcyBhcmUgYXZhaWxhYmxlIHRocm91Z2ggYSBgdHlwZWAgcHJvcGVydHksIHN1Y2ggYXNcbiAqIC0gdGV4dCAtIHNpbXBsZSB0ZXh0IG1lc3NhZ2VcbiAqIC0gZmlsZSAtIGNvdWxkIGJlIGEgZmlsZSBwcmV2aWV3IG9yIGEgZmlsZSBpY29uXG4gKiBpZiBtdWx0aXBsZSBmaWxlcyBhcmUgcHJvdmlkZWQgZ3JvdXBlZCBmaWxlcyBhcmUgc2hvd25cbiAqIC0gcXVvdGUgLSBxdW90ZXMgYSBtZXNzYWdlIHdpdGggc3BlY2lmaWMgcXVvdGUgc3R5bGVzXG4gKiAtIG1hcCAtIHNob3dzIGEgZ29vZ2xlIG1hcCBwaWN0dXJlIGJ5IHByb3ZpZGVkIFtsYXRpdHVkZV0gYW5kIFtsb25naXR1ZGVdIHByb3BlcnRpZXNcbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKEF2YWlsYWJsZSBUeXBlcywgY2hhdC9jaGF0LW1lc3NhZ2UtdHlwZXMtc2hvd2Nhc2UuY29tcG9uZW50KVxuICpcbiAqIE1lc3NhZ2Ugd2l0aCBhdHRhY2hlZCBmaWxlczpcbiAqIGBgYGh0bWxcbiAqIDxuYi1jaGF0LW1lc3NhZ2VcbiAqICAgdHlwZT1cImZpbGVcIlxuICogICBbZmlsZXNdPVwiWyB7IHVybDogJy4uLicgfSBdXCJcbiAqICAgbWVzc2FnZT1cIkhlbGxvIHdvcmxkIVwiPlxuICogPC9uYi1jaGF0LW1lc3NhZ2U+XG4gKiBgYGBcbiAqXG4gKiBNYXAgbWVzc2FnZTpcbiAqIGBgYGh0bWxcbiAqIDxuYi1jaGF0LW1lc3NhZ2VcbiAqICAgdHlwZT1cIm1hcFwiXG4gKiAgIFtsYXRpdHVkZV09XCI1My45MTRcIlxuICogICBbbG9uZ2l0dWRlXT1cIjI3LjU5XCJcbiAqICAgbWVzc2FnZT1cIkhlcmUgSSBhbVwiPlxuICogPC9uYi1jaGF0LW1lc3NhZ2U+XG4gKiBgYGBcbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogY2hhdC1tZXNzYWdlLWJhY2tncm91bmQ6XG4gKiBjaGF0LW1lc3NhZ2UtdGV4dC1jb2xvcjpcbiAqIGNoYXQtbWVzc2FnZS1yZXBseS1iYWNrZ3JvdW5kLWNvbG9yOlxuICogY2hhdC1tZXNzYWdlLXJlcGx5LXRleHQtY29sb3I6XG4gKiBjaGF0LW1lc3NhZ2UtYXZhdGFyLWJhY2tncm91bmQtY29sb3I6XG4gKiBjaGF0LW1lc3NhZ2Utc2VuZGVyLXRleHQtY29sb3I6XG4gKiBjaGF0LW1lc3NhZ2UtcXVvdGUtYmFja2dyb3VuZC1jb2xvcjpcbiAqIGNoYXQtbWVzc2FnZS1xdW90ZS10ZXh0LWNvbG9yOlxuICogY2hhdC1tZXNzYWdlLWZpbGUtdGV4dC1jb2xvcjpcbiAqIGNoYXQtbWVzc2FnZS1maWxlLWJhY2tncm91bmQtY29sb3I6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iQ2hhdE1lc3NhZ2VDb21wb25lbnQge1xuICAgIHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcjtcbiAgICByZWFkb25seSBmbHlJbk91dDogYm9vbGVhbjtcbiAgICByZWFkb25seSBub3RSZXBseTogYm9vbGVhbjtcbiAgICBhdmF0YXJTdHlsZTogU2FmZVN0eWxlO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgYSBtZXNzYWdlIGlzIGEgcmVwbHlcbiAgICAgKi9cbiAgICByZXBseTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX3JlcGx5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE1lc3NhZ2Ugc2VuZGVyXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTWVzc2FnZSBzZW5kZXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHNlbmRlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1lc3NhZ2Ugc2VuZCBkYXRlXG4gICAgICogQHR5cGUge0RhdGV9XG4gICAgICovXG4gICAgZGF0ZTogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBmaWxlcyBgeyB1cmw6ICdmaWxlIHVybCcsIGljb246ICdmaWxlIGljb24gY2xhc3MnIH1gXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBmaWxlczoge1xuICAgICAgICB1cmw6IHN0cmluZztcbiAgICAgICAgaWNvbjogc3RyaW5nO1xuICAgIH1bXTtcbiAgICAvKipcbiAgICAgKiBRdW90ZWQgbWVzc2FnZSB0ZXh0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBxdW90ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1hcCBsYXRpdHVkZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBNYXAgbG9uZ2l0dWRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBNZXNzYWdlIHNlbmQgYXZhdGFyXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBhdmF0YXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXNzYWdlIHR5cGUsIGF2YWlsYWJsZSBvcHRpb25zIGB0ZXh0fGZpbGV8bWFwfHF1b3RlYFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKTtcbiAgICBnZXRJbml0aWFscygpOiBzdHJpbmc7XG59XG4iXX0=