/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { OnInit, OnDestroy, ElementRef, OnChanges } from '@angular/core';
import { Subscription } from 'rxjs';
import { NbThemeService } from '../../services/theme.service';
import { NbSidebarService } from './sidebar.service';
/**
 * Sidebar header container.
 *
 * Placeholder which contains a sidebar header content,
 * placed at the very top of the sidebar outside of the scroll area.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbSidebarHeaderComponent {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSidebarHeaderComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbSidebarHeaderComponent, "nb-sidebar-header", never, {}, {}, never>;
}
/**
 * Sidebar footer container.
 *
 * Placeholder which contains a sidebar footer content,
 * placed at the very bottom of the sidebar outside of the scroll area.
 */
export declare class NbSidebarFooterComponent {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSidebarFooterComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbSidebarFooterComponent, "nb-sidebar-footer", never, {}, {}, never>;
}
/**
 * Layout sidebar component.
 *
 * @stacked-example(Showcase, sidebar/sidebar-showcase.component)
 *
 * ### Installation
 *
 * Import `NbSidebarModule.forRoot()` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSidebarModule.forRoot(),
 *   ],
 * })
 * export class AppModule { }
 * ```
 * and `NbSidebarModule` to your feature module where the component should be shown:
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbSidebarModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Sidebar can be placed on the left or the right side of the layout,
 * or on start/end position of layout (depends on document direction, left to right or right to left)
 * It can be fixed (shown above the content) or can push the layout when opened.
 *
 * There are three states - `expanded`, `collapsed`, `compacted`.
 * By default sidebar content is fixed and saves its position while the page is being scrolled.
 *
 * Compacted sidebar example:
 * @stacked-example(Compacted Sidebar, sidebar/sidebar-compacted.component)
 *
 * Sidebar also supports a `responsive` behavior, listening to window size change and changing its size respectably.
 *
 * In a pair with header it is possible to setup a configuration when header is placed on a side of the sidebar
 * and not on top of it. To achieve this simply put a `subheader` property to the header like this:
 * ```html
 * <nb-layout-header subheader></nb-layout-header>
 * ```
 * @stacked-example(Subheader, layout/layout-sidebar-subheader.component)
 * Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`.
 *
 * @additional-example(Right Sidebar, sidebar/sidebar-right.component)
 * @additional-example(Fixed Sidebar, sidebar/sidebar-fixed.component)
 *
 * @styles
 *
 * sidebar-background-color:
 * sidebar-text-color:
 * sidebar-text-font-family:
 * sidebar-text-font-size:
 * sidebar-text-font-weight:
 * sidebar-text-line-height:
 * sidebar-height:
 * sidebar-width:
 * sidebar-width-compact:
 * sidebar-padding:
 * sidebar-header-height:
 * sidebar-footer-height:
 * sidebar-shadow:
 * sidebar-menu-item-highlight-color:
 * sidebar-scrollbar-background-color:
 * sidebar-scrollbar-color:
 * sidebar-scrollbar-width:
 */
export declare class NbSidebarComponent implements OnChanges, OnInit, OnDestroy {
    private sidebarService;
    private themeService;
    private element;
    static readonly STATE_EXPANDED: string;
    static readonly STATE_COLLAPSED: string;
    static readonly STATE_COMPACTED: string;
    static readonly RESPONSIVE_STATE_MOBILE: string;
    static readonly RESPONSIVE_STATE_TABLET: string;
    static readonly RESPONSIVE_STATE_PC: string;
    protected stateValue: string;
    protected responsiveValue: boolean;
    private alive;
    containerFixedValue: boolean;
    fixedValue: boolean;
    rightValue: boolean;
    leftValue: boolean;
    startValue: boolean;
    endValue: boolean;
    readonly expanded: boolean;
    readonly collapsed: boolean;
    readonly compacted: boolean;
    /**
     * Places sidebar on the right side
     * @type {boolean}
     */
    right: boolean;
    /**
     * Places sidebar on the left side
     * @type {boolean}
     */
    left: boolean;
    /**
     * Places sidebar on the start edge of layout
     * @type {boolean}
     */
    start: boolean;
    /**
     * Places sidebar on the end edge of layout
     * @type {boolean}
     */
    end: boolean;
    /**
     * Makes sidebar fixed (shown above the layout content)
     * @type {boolean}
     */
    fixed: boolean;
    /**
     * Makes sidebar container fixed
     * @type {boolean}
     */
    containerFixed: boolean;
    /**
     * Initial sidebar state, `expanded`|`collapsed`|`compacted`
     * @type {string}
     */
    state: string;
    /**
     * Makes sidebar listen to media query events and change its behaviour
     * @type {boolean}
     */
    responsive: boolean;
    /**
     * Tags a sidebar with some ID, can be later used in the sidebar service
     * to determine which sidebar triggered the action, if multiple sidebars exist on the page.
     *
     * @type {string}
     */
    tag: string;
    /**
     * Controls on which screen sizes sidebar should be switched to compacted state.
     * Works only when responsive mode is on.
     * Default values are `['xs', 'is', 'sm', 'md', 'lg']`.
     *
     * @type string[]
     */
    compactedBreakpoints: string[];
    /**
     * Controls on which screen sizes sidebar should be switched to collapsed state.
     * Works only when responsive mode is on.
     * Default values are `['xs', 'is']`.
     *
     * @type string[]
     */
    collapsedBreakpoints: string[];
    private mediaQuerySubscription;
    private responsiveState;
    constructor(sidebarService: NbSidebarService, themeService: NbThemeService, element: ElementRef);
    toggleResponsive(enabled: boolean): void;
    ngOnChanges(changes: any): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onClick(event: any): void;
    /**
     * Collapses the sidebar
     */
    collapse(): void;
    /**
     * Expands the sidebar
     */
    expand(): void;
    /**
     * Compacts the sidebar (minimizes)
     */
    compact(): void;
    /**
     * Toggles sidebar state (expanded|collapsed|compacted)
     * @param {boolean} compact If true, then sidebar state will be changed between expanded & compacted,
     * otherwise - between expanded & collapsed. False by default.
     *
     * Toggle sidebar state
     *
     * ```ts
     * this.sidebar.toggle(true);
     * ```
     */
    toggle(compact?: boolean): void;
    protected onMediaQueryChanges(): Subscription;
    protected responsiveEnabled(): boolean;
    protected getMenuLink(element: HTMLElement): HTMLElement | undefined;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbSidebarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbSidebarComponent, "nb-sidebar", never, {
    "compactedBreakpoints": "compactedBreakpoints";
    "collapsedBreakpoints": "collapsedBreakpoints";
    "right": "right";
    "left": "left";
    "start": "start";
    "end": "end";
    "fixed": "fixed";
    "containerFixed": "containerFixed";
    "state": "state";
    "responsive": "responsive";
    "tag": "tag";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic2lkZWJhci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQWVBOzs7QUFDQTs7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpTUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5pbXBvcnQgeyBPbkluaXQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iVGhlbWVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGhlbWUuc2VydmljZSc7XG5pbXBvcnQgeyBOYlNpZGViYXJTZXJ2aWNlIH0gZnJvbSAnLi9zaWRlYmFyLnNlcnZpY2UnO1xuLyoqXG4gKiBTaWRlYmFyIGhlYWRlciBjb250YWluZXIuXG4gKlxuICogUGxhY2Vob2xkZXIgd2hpY2ggY29udGFpbnMgYSBzaWRlYmFyIGhlYWRlciBjb250ZW50LFxuICogcGxhY2VkIGF0IHRoZSB2ZXJ5IHRvcCBvZiB0aGUgc2lkZWJhciBvdXRzaWRlIG9mIHRoZSBzY3JvbGwgYXJlYS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJTaWRlYmFySGVhZGVyQ29tcG9uZW50IHtcbn1cbi8qKlxuICogU2lkZWJhciBmb290ZXIgY29udGFpbmVyLlxuICpcbiAqIFBsYWNlaG9sZGVyIHdoaWNoIGNvbnRhaW5zIGEgc2lkZWJhciBmb290ZXIgY29udGVudCxcbiAqIHBsYWNlZCBhdCB0aGUgdmVyeSBib3R0b20gb2YgdGhlIHNpZGViYXIgb3V0c2lkZSBvZiB0aGUgc2Nyb2xsIGFyZWEuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU2lkZWJhckZvb3RlckNvbXBvbmVudCB7XG59XG4vKipcbiAqIExheW91dCBzaWRlYmFyIGNvbXBvbmVudC5cbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFNob3djYXNlLCBzaWRlYmFyL3NpZGViYXItc2hvd2Nhc2UuY29tcG9uZW50KVxuICpcbiAqICMjIyBJbnN0YWxsYXRpb25cbiAqXG4gKiBJbXBvcnQgYE5iU2lkZWJhck1vZHVsZS5mb3JSb290KClgIHRvIHlvdXIgYXBwIG1vZHVsZS5cbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJTaWRlYmFyTW9kdWxlLmZvclJvb3QoKSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHsgfVxuICogYGBgXG4gKiBhbmQgYE5iU2lkZWJhck1vZHVsZWAgdG8geW91ciBmZWF0dXJlIG1vZHVsZSB3aGVyZSB0aGUgY29tcG9uZW50IHNob3VsZCBiZSBzaG93bjpcbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJTaWRlYmFyTW9kdWxlLFxuICogICBdLFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBQYWdlTW9kdWxlIHsgfVxuICogYGBgXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBTaWRlYmFyIGNhbiBiZSBwbGFjZWQgb24gdGhlIGxlZnQgb3IgdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGxheW91dCxcbiAqIG9yIG9uIHN0YXJ0L2VuZCBwb3NpdGlvbiBvZiBsYXlvdXQgKGRlcGVuZHMgb24gZG9jdW1lbnQgZGlyZWN0aW9uLCBsZWZ0IHRvIHJpZ2h0IG9yIHJpZ2h0IHRvIGxlZnQpXG4gKiBJdCBjYW4gYmUgZml4ZWQgKHNob3duIGFib3ZlIHRoZSBjb250ZW50KSBvciBjYW4gcHVzaCB0aGUgbGF5b3V0IHdoZW4gb3BlbmVkLlxuICpcbiAqIFRoZXJlIGFyZSB0aHJlZSBzdGF0ZXMgLSBgZXhwYW5kZWRgLCBgY29sbGFwc2VkYCwgYGNvbXBhY3RlZGAuXG4gKiBCeSBkZWZhdWx0IHNpZGViYXIgY29udGVudCBpcyBmaXhlZCBhbmQgc2F2ZXMgaXRzIHBvc2l0aW9uIHdoaWxlIHRoZSBwYWdlIGlzIGJlaW5nIHNjcm9sbGVkLlxuICpcbiAqIENvbXBhY3RlZCBzaWRlYmFyIGV4YW1wbGU6XG4gKiBAc3RhY2tlZC1leGFtcGxlKENvbXBhY3RlZCBTaWRlYmFyLCBzaWRlYmFyL3NpZGViYXItY29tcGFjdGVkLmNvbXBvbmVudClcbiAqXG4gKiBTaWRlYmFyIGFsc28gc3VwcG9ydHMgYSBgcmVzcG9uc2l2ZWAgYmVoYXZpb3IsIGxpc3RlbmluZyB0byB3aW5kb3cgc2l6ZSBjaGFuZ2UgYW5kIGNoYW5naW5nIGl0cyBzaXplIHJlc3BlY3RhYmx5LlxuICpcbiAqIEluIGEgcGFpciB3aXRoIGhlYWRlciBpdCBpcyBwb3NzaWJsZSB0byBzZXR1cCBhIGNvbmZpZ3VyYXRpb24gd2hlbiBoZWFkZXIgaXMgcGxhY2VkIG9uIGEgc2lkZSBvZiB0aGUgc2lkZWJhclxuICogYW5kIG5vdCBvbiB0b3Agb2YgaXQuIFRvIGFjaGlldmUgdGhpcyBzaW1wbHkgcHV0IGEgYHN1YmhlYWRlcmAgcHJvcGVydHkgdG8gdGhlIGhlYWRlciBsaWtlIHRoaXM6XG4gKiBgYGBodG1sXG4gKiA8bmItbGF5b3V0LWhlYWRlciBzdWJoZWFkZXI+PC9uYi1sYXlvdXQtaGVhZGVyPlxuICogYGBgXG4gKiBAc3RhY2tlZC1leGFtcGxlKFN1YmhlYWRlciwgbGF5b3V0L2xheW91dC1zaWRlYmFyLXN1YmhlYWRlci5jb21wb25lbnQpXG4gKiBOb3RlIHRoYXQgaW4gc3VjaCBjb25maWd1cmF0aW9uIHNpZGViYXIgc2hhZG93IGlzIHJlbW92ZWQgYW5kIGhlYWRlciBjYW5ub3QgYmUgbWFrZSBgZml4ZWRgLlxuICpcbiAqIEBhZGRpdGlvbmFsLWV4YW1wbGUoUmlnaHQgU2lkZWJhciwgc2lkZWJhci9zaWRlYmFyLXJpZ2h0LmNvbXBvbmVudClcbiAqIEBhZGRpdGlvbmFsLWV4YW1wbGUoRml4ZWQgU2lkZWJhciwgc2lkZWJhci9zaWRlYmFyLWZpeGVkLmNvbXBvbmVudClcbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogc2lkZWJhci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogc2lkZWJhci10ZXh0LWNvbG9yOlxuICogc2lkZWJhci10ZXh0LWZvbnQtZmFtaWx5OlxuICogc2lkZWJhci10ZXh0LWZvbnQtc2l6ZTpcbiAqIHNpZGViYXItdGV4dC1mb250LXdlaWdodDpcbiAqIHNpZGViYXItdGV4dC1saW5lLWhlaWdodDpcbiAqIHNpZGViYXItaGVpZ2h0OlxuICogc2lkZWJhci13aWR0aDpcbiAqIHNpZGViYXItd2lkdGgtY29tcGFjdDpcbiAqIHNpZGViYXItcGFkZGluZzpcbiAqIHNpZGViYXItaGVhZGVyLWhlaWdodDpcbiAqIHNpZGViYXItZm9vdGVyLWhlaWdodDpcbiAqIHNpZGViYXItc2hhZG93OlxuICogc2lkZWJhci1tZW51LWl0ZW0taGlnaGxpZ2h0LWNvbG9yOlxuICogc2lkZWJhci1zY3JvbGxiYXItYmFja2dyb3VuZC1jb2xvcjpcbiAqIHNpZGViYXItc2Nyb2xsYmFyLWNvbG9yOlxuICogc2lkZWJhci1zY3JvbGxiYXItd2lkdGg6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU2lkZWJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgc2lkZWJhclNlcnZpY2U7XG4gICAgcHJpdmF0ZSB0aGVtZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHN0YXRpYyByZWFkb25seSBTVEFURV9FWFBBTkRFRDogc3RyaW5nO1xuICAgIHN0YXRpYyByZWFkb25seSBTVEFURV9DT0xMQVBTRUQ6IHN0cmluZztcbiAgICBzdGF0aWMgcmVhZG9ubHkgU1RBVEVfQ09NUEFDVEVEOiBzdHJpbmc7XG4gICAgc3RhdGljIHJlYWRvbmx5IFJFU1BPTlNJVkVfU1RBVEVfTU9CSUxFOiBzdHJpbmc7XG4gICAgc3RhdGljIHJlYWRvbmx5IFJFU1BPTlNJVkVfU1RBVEVfVEFCTEVUOiBzdHJpbmc7XG4gICAgc3RhdGljIHJlYWRvbmx5IFJFU1BPTlNJVkVfU1RBVEVfUEM6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgc3RhdGVWYWx1ZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCByZXNwb25zaXZlVmFsdWU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBhbGl2ZTtcbiAgICBjb250YWluZXJGaXhlZFZhbHVlOiBib29sZWFuO1xuICAgIGZpeGVkVmFsdWU6IGJvb2xlYW47XG4gICAgcmlnaHRWYWx1ZTogYm9vbGVhbjtcbiAgICBsZWZ0VmFsdWU6IGJvb2xlYW47XG4gICAgc3RhcnRWYWx1ZTogYm9vbGVhbjtcbiAgICBlbmRWYWx1ZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBleHBhbmRlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSBjb2xsYXBzZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY29tcGFjdGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFBsYWNlcyBzaWRlYmFyIG9uIHRoZSByaWdodCBzaWRlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgcmlnaHQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUGxhY2VzIHNpZGViYXIgb24gdGhlIGxlZnQgc2lkZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGxlZnQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUGxhY2VzIHNpZGViYXIgb24gdGhlIHN0YXJ0IGVkZ2Ugb2YgbGF5b3V0XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgc3RhcnQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUGxhY2VzIHNpZGViYXIgb24gdGhlIGVuZCBlZGdlIG9mIGxheW91dFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGVuZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBNYWtlcyBzaWRlYmFyIGZpeGVkIChzaG93biBhYm92ZSB0aGUgbGF5b3V0IGNvbnRlbnQpXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZml4ZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTWFrZXMgc2lkZWJhciBjb250YWluZXIgZml4ZWRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjb250YWluZXJGaXhlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsIHNpZGViYXIgc3RhdGUsIGBleHBhbmRlZGB8YGNvbGxhcHNlZGB8YGNvbXBhY3RlZGBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTWFrZXMgc2lkZWJhciBsaXN0ZW4gdG8gbWVkaWEgcXVlcnkgZXZlbnRzIGFuZCBjaGFuZ2UgaXRzIGJlaGF2aW91clxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHJlc3BvbnNpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGFncyBhIHNpZGViYXIgd2l0aCBzb21lIElELCBjYW4gYmUgbGF0ZXIgdXNlZCBpbiB0aGUgc2lkZWJhciBzZXJ2aWNlXG4gICAgICogdG8gZGV0ZXJtaW5lIHdoaWNoIHNpZGViYXIgdHJpZ2dlcmVkIHRoZSBhY3Rpb24sIGlmIG11bHRpcGxlIHNpZGViYXJzIGV4aXN0IG9uIHRoZSBwYWdlLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0YWc6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDb250cm9scyBvbiB3aGljaCBzY3JlZW4gc2l6ZXMgc2lkZWJhciBzaG91bGQgYmUgc3dpdGNoZWQgdG8gY29tcGFjdGVkIHN0YXRlLlxuICAgICAqIFdvcmtzIG9ubHkgd2hlbiByZXNwb25zaXZlIG1vZGUgaXMgb24uXG4gICAgICogRGVmYXVsdCB2YWx1ZXMgYXJlIGBbJ3hzJywgJ2lzJywgJ3NtJywgJ21kJywgJ2xnJ11gLlxuICAgICAqXG4gICAgICogQHR5cGUgc3RyaW5nW11cbiAgICAgKi9cbiAgICBjb21wYWN0ZWRCcmVha3BvaW50czogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgb24gd2hpY2ggc2NyZWVuIHNpemVzIHNpZGViYXIgc2hvdWxkIGJlIHN3aXRjaGVkIHRvIGNvbGxhcHNlZCBzdGF0ZS5cbiAgICAgKiBXb3JrcyBvbmx5IHdoZW4gcmVzcG9uc2l2ZSBtb2RlIGlzIG9uLlxuICAgICAqIERlZmF1bHQgdmFsdWVzIGFyZSBgWyd4cycsICdpcyddYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHN0cmluZ1tdXG4gICAgICovXG4gICAgY29sbGFwc2VkQnJlYWtwb2ludHM6IHN0cmluZ1tdO1xuICAgIHByaXZhdGUgbWVkaWFRdWVyeVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHJlc3BvbnNpdmVTdGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihzaWRlYmFyU2VydmljZTogTmJTaWRlYmFyU2VydmljZSwgdGhlbWVTZXJ2aWNlOiBOYlRoZW1lU2VydmljZSwgZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgdG9nZ2xlUmVzcG9uc2l2ZShlbmFibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBvbkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbGxhcHNlcyB0aGUgc2lkZWJhclxuICAgICAqL1xuICAgIGNvbGxhcHNlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXhwYW5kcyB0aGUgc2lkZWJhclxuICAgICAqL1xuICAgIGV4cGFuZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbXBhY3RzIHRoZSBzaWRlYmFyIChtaW5pbWl6ZXMpXG4gICAgICovXG4gICAgY29tcGFjdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgc2lkZWJhciBzdGF0ZSAoZXhwYW5kZWR8Y29sbGFwc2VkfGNvbXBhY3RlZClcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbXBhY3QgSWYgdHJ1ZSwgdGhlbiBzaWRlYmFyIHN0YXRlIHdpbGwgYmUgY2hhbmdlZCBiZXR3ZWVuIGV4cGFuZGVkICYgY29tcGFjdGVkLFxuICAgICAqIG90aGVyd2lzZSAtIGJldHdlZW4gZXhwYW5kZWQgJiBjb2xsYXBzZWQuIEZhbHNlIGJ5IGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiBUb2dnbGUgc2lkZWJhciBzdGF0ZVxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiB0aGlzLnNpZGViYXIudG9nZ2xlKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHRvZ2dsZShjb21wYWN0PzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uTWVkaWFRdWVyeUNoYW5nZXMoKTogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCByZXNwb25zaXZlRW5hYmxlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBnZXRNZW51TGluayhlbGVtZW50OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xufVxuIl19