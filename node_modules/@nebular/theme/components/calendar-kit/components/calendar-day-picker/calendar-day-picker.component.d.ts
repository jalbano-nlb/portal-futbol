/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter, OnChanges, SimpleChanges, Type } from '@angular/core';
import { NbCalendarMonthModelService } from '../../services/calendar-month-model.service';
import { NbCalendarCell, NbCalendarSize } from '../../model';
/**
 * Provides capability pick days.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbCalendarDayPickerComponent<D, T> implements OnChanges {
    private monthModel;
    /**
     * Describes which month picker have to render.
     * */
    visibleDate: D;
    /**
     * Defines if we should render previous and next months
     * in the current month view.
     * */
    boundingMonths: boolean;
    /**
     * Minimum available date for selection.
     * */
    min: D;
    /**
     * Maximum available date for selection.
     * */
    max: D;
    /**
     * Predicate that decides which cells will be disabled.
     * */
    filter: (D: any) => boolean;
    /**
     * Custom day cell component. Have to implement `NbCalendarCell` interface.
     * */
    setCellComponent: Type<NbCalendarCell<D, T>>;
    cellComponent: Type<NbCalendarCell<any, any>>;
    /**
     * Size of the component.
     * Can be 'medium' which is default or 'large'.
     * */
    size: NbCalendarSize;
    /**
     * Already selected date.
     * */
    date: T;
    /**
     * Determines should we show week numbers column.
     * False by default.
     * */
    showWeekNumber: boolean;
    protected _showWeekNumber: boolean;
    /**
     * Sets symbol used as a header for week numbers column
     * */
    weekNumberSymbol: string;
    /**
     * Fires newly selected date.
     * */
    dateChange: EventEmitter<D>;
    readonly medium: boolean;
    readonly large: boolean;
    /**
     * Day picker model.
     * Provides all days in current month and if boundingMonth is true some days
     * from previous and next one.
     * */
    weeks: D[][];
    constructor(monthModel: NbCalendarMonthModelService<D>);
    ngOnChanges({ visibleDate }: SimpleChanges): void;
    onSelect(day: D): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbCalendarDayPickerComponent<any, any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbCalendarDayPickerComponent<any, any>, "nb-calendar-day-picker", never, {
    "boundingMonths": "boundingMonths";
    "size": "size";
    "setCellComponent": "cellComponent";
    "showWeekNumber": "showWeekNumber";
    "visibleDate": "visibleDate";
    "min": "min";
    "max": "max";
    "filter": "filter";
    "date": "date";
    "weekNumberSymbol": "weekNumberSymbol";
}, {
    "dateChange": "dateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZGF5LXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FsZW5kYXItZGF5LXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOERBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iQ2FsZW5kYXJNb250aE1vZGVsU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NhbGVuZGFyLW1vbnRoLW1vZGVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmJDYWxlbmRhckNlbGwsIE5iQ2FsZW5kYXJTaXplIH0gZnJvbSAnLi4vLi4vbW9kZWwnO1xuLyoqXG4gKiBQcm92aWRlcyBjYXBhYmlsaXR5IHBpY2sgZGF5cy5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkNhbGVuZGFyRGF5UGlja2VyQ29tcG9uZW50PEQsIFQ+IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIG1vbnRoTW9kZWw7XG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIHdoaWNoIG1vbnRoIHBpY2tlciBoYXZlIHRvIHJlbmRlci5cbiAgICAgKiAqL1xuICAgIHZpc2libGVEYXRlOiBEO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgaWYgd2Ugc2hvdWxkIHJlbmRlciBwcmV2aW91cyBhbmQgbmV4dCBtb250aHNcbiAgICAgKiBpbiB0aGUgY3VycmVudCBtb250aCB2aWV3LlxuICAgICAqICovXG4gICAgYm91bmRpbmdNb250aHM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTWluaW11bSBhdmFpbGFibGUgZGF0ZSBmb3Igc2VsZWN0aW9uLlxuICAgICAqICovXG4gICAgbWluOiBEO1xuICAgIC8qKlxuICAgICAqIE1heGltdW0gYXZhaWxhYmxlIGRhdGUgZm9yIHNlbGVjdGlvbi5cbiAgICAgKiAqL1xuICAgIG1heDogRDtcbiAgICAvKipcbiAgICAgKiBQcmVkaWNhdGUgdGhhdCBkZWNpZGVzIHdoaWNoIGNlbGxzIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAgICogKi9cbiAgICBmaWx0ZXI6IChEOiBhbnkpID0+IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIGRheSBjZWxsIGNvbXBvbmVudC4gSGF2ZSB0byBpbXBsZW1lbnQgYE5iQ2FsZW5kYXJDZWxsYCBpbnRlcmZhY2UuXG4gICAgICogKi9cbiAgICBzZXRDZWxsQ29tcG9uZW50OiBUeXBlPE5iQ2FsZW5kYXJDZWxsPEQsIFQ+PjtcbiAgICBjZWxsQ29tcG9uZW50OiBUeXBlPE5iQ2FsZW5kYXJDZWxsPGFueSwgYW55Pj47XG4gICAgLyoqXG4gICAgICogU2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIENhbiBiZSAnbWVkaXVtJyB3aGljaCBpcyBkZWZhdWx0IG9yICdsYXJnZScuXG4gICAgICogKi9cbiAgICBzaXplOiBOYkNhbGVuZGFyU2l6ZTtcbiAgICAvKipcbiAgICAgKiBBbHJlYWR5IHNlbGVjdGVkIGRhdGUuXG4gICAgICogKi9cbiAgICBkYXRlOiBUO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgc2hvdWxkIHdlIHNob3cgd2VlayBudW1iZXJzIGNvbHVtbi5cbiAgICAgKiBGYWxzZSBieSBkZWZhdWx0LlxuICAgICAqICovXG4gICAgc2hvd1dlZWtOdW1iZXI6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9zaG93V2Vla051bWJlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHN5bWJvbCB1c2VkIGFzIGEgaGVhZGVyIGZvciB3ZWVrIG51bWJlcnMgY29sdW1uXG4gICAgICogKi9cbiAgICB3ZWVrTnVtYmVyU3ltYm9sOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRmlyZXMgbmV3bHkgc2VsZWN0ZWQgZGF0ZS5cbiAgICAgKiAqL1xuICAgIGRhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEPjtcbiAgICByZWFkb25seSBtZWRpdW06IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbGFyZ2U6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGF5IHBpY2tlciBtb2RlbC5cbiAgICAgKiBQcm92aWRlcyBhbGwgZGF5cyBpbiBjdXJyZW50IG1vbnRoIGFuZCBpZiBib3VuZGluZ01vbnRoIGlzIHRydWUgc29tZSBkYXlzXG4gICAgICogZnJvbSBwcmV2aW91cyBhbmQgbmV4dCBvbmUuXG4gICAgICogKi9cbiAgICB3ZWVrczogRFtdW107XG4gICAgY29uc3RydWN0b3IobW9udGhNb2RlbDogTmJDYWxlbmRhck1vbnRoTW9kZWxTZXJ2aWNlPEQ+KTtcbiAgICBuZ09uQ2hhbmdlcyh7IHZpc2libGVEYXRlIH06IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG9uU2VsZWN0KGRheTogRCk6IHZvaWQ7XG59XG4iXX0=