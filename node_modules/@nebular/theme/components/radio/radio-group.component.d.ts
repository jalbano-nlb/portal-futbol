import { AfterContentInit, EventEmitter, OnDestroy, QueryList, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NbRadioComponent } from './radio.component';
import { NbComponentStatus } from '../component-status';
/**
 * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.
 * It provides form bindings:
 *
 * ```html
 * <nb-radio-group [(ngModel)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Also, you can use `value` and `valueChange` for binding without forms.
 *
 * ```html
 * <nb-radio-group [(value)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Radio items name has to be provided through `name` input property of the radio group.
 *
 * ```html
 * <nb-radio-group name="my-radio-group">
 *   ...
 * </nb-radio-group>
 * ```
 *
 * You can change radio group status by setting `status` input.
 * @stacked-example(Statuses, radio/radio-statuses.component)
 *
 * Also, you can disable the whole group using `disabled` attribute.
 * @stacked-example(Disabled group, radio/radio-disabled-group.component)
 *
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbRadioGroupComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {
    protected hostElement: ElementRef<HTMLElement>;
    protected platformId: any;
    protected document: any;
    protected alive: boolean;
    protected onChange: (value: any) => void;
    protected onTouched: () => void;
    value: any;
    protected _value: any;
    name: string;
    protected _name: string;
    disabled: boolean;
    protected _disabled: boolean;
    /**
     * Radio buttons status.
     * Possible values are `primary` (default), `success`, `warning`, `danger`, `info`.
     */
    status: NbComponentStatus;
    protected _status: NbComponentStatus;
    radios: QueryList<NbRadioComponent>;
    valueChange: EventEmitter<any>;
    constructor(hostElement: ElementRef<HTMLElement>, platformId: any, document: any);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    protected updateAndSubscribeToRadios(): void;
    protected updateNames(): void;
    protected updateValues(): void;
    protected updateDisabled(): void;
    protected subscribeOnRadiosValueChange(): void;
    protected propagateValue(value: any): void;
    protected subscribeOnRadiosBlur(): void;
    protected updateStatus(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbRadioGroupComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbRadioGroupComponent, "nb-radio-group", never, {
    "value": "value";
    "name": "name";
    "disabled": "disabled";
    "status": "status";
}, {
    "valueChange": "valueChange";
}, ["radios"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhZGlvLWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5Q0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOYlJhZGlvQ29tcG9uZW50IH0gZnJvbSAnLi9yYWRpby5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmJDb21wb25lbnRTdGF0dXMgfSBmcm9tICcuLi9jb21wb25lbnQtc3RhdHVzJztcbi8qKlxuICogVGhlIGBOYlJhZGlvR3JvdXBDb21wb25lbnRgIGlzIHRoZSB3cmFwcGVyIGZvciBgbmItcmFkaW9gIGJ1dHRvbi5cbiAqIEl0IHByb3ZpZGVzIGZvcm0gYmluZGluZ3M6XG4gKlxuICogYGBgaHRtbFxuICogPG5iLXJhZGlvLWdyb3VwIFsobmdNb2RlbCldPVwic2VsZWN0ZWRPcHRpb25cIj5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiMVwiPk9wdGlvbiAxPC9uYi1yYWRpbz5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiMlwiPk9wdGlvbiAyPC9uYi1yYWRpbz5cbiAqICAgPG5iLXJhZGlvIHZhbHVlPVwiM1wiPk9wdGlvbiAzPC9uYi1yYWRpbz5cbiAqIDwvbmItcmFkaW8tZ3JvdXA+XG4gKiBgYGBcbiAqXG4gKiBBbHNvLCB5b3UgY2FuIHVzZSBgdmFsdWVgIGFuZCBgdmFsdWVDaGFuZ2VgIGZvciBiaW5kaW5nIHdpdGhvdXQgZm9ybXMuXG4gKlxuICogYGBgaHRtbFxuICogPG5iLXJhZGlvLWdyb3VwIFsodmFsdWUpXT1cInNlbGVjdGVkT3B0aW9uXCI+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjFcIj5PcHRpb24gMTwvbmItcmFkaW8+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjJcIj5PcHRpb24gMjwvbmItcmFkaW8+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjNcIj5PcHRpb24gMzwvbmItcmFkaW8+XG4gKiA8L25iLXJhZGlvLWdyb3VwPlxuICogYGBgXG4gKlxuICogUmFkaW8gaXRlbXMgbmFtZSBoYXMgdG8gYmUgcHJvdmlkZWQgdGhyb3VnaCBgbmFtZWAgaW5wdXQgcHJvcGVydHkgb2YgdGhlIHJhZGlvIGdyb3VwLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuYi1yYWRpby1ncm91cCBuYW1lPVwibXktcmFkaW8tZ3JvdXBcIj5cbiAqICAgLi4uXG4gKiA8L25iLXJhZGlvLWdyb3VwPlxuICogYGBgXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgcmFkaW8gZ3JvdXAgc3RhdHVzIGJ5IHNldHRpbmcgYHN0YXR1c2AgaW5wdXQuXG4gKiBAc3RhY2tlZC1leGFtcGxlKFN0YXR1c2VzLCByYWRpby9yYWRpby1zdGF0dXNlcy5jb21wb25lbnQpXG4gKlxuICogQWxzbywgeW91IGNhbiBkaXNhYmxlIHRoZSB3aG9sZSBncm91cCB1c2luZyBgZGlzYWJsZWRgIGF0dHJpYnV0ZS5cbiAqIEBzdGFja2VkLWV4YW1wbGUoRGlzYWJsZWQgZ3JvdXAsIHJhZGlvL3JhZGlvLWRpc2FibGVkLWdyb3VwLmNvbXBvbmVudClcbiAqXG4gKiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJSYWRpb0dyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJvdGVjdGVkIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgICBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogYW55O1xuICAgIHByb3RlY3RlZCBkb2N1bWVudDogYW55O1xuICAgIHByb3RlY3RlZCBhbGl2ZTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgb25DaGFuZ2U6ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xuICAgIHByb3RlY3RlZCBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgdmFsdWU6IGFueTtcbiAgICBwcm90ZWN0ZWQgX3ZhbHVlOiBhbnk7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBfbmFtZTogc3RyaW5nO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmFkaW8gYnV0dG9ucyBzdGF0dXMuXG4gICAgICogUG9zc2libGUgdmFsdWVzIGFyZSBgcHJpbWFyeWAgKGRlZmF1bHQpLCBgc3VjY2Vzc2AsIGB3YXJuaW5nYCwgYGRhbmdlcmAsIGBpbmZvYC5cbiAgICAgKi9cbiAgICBzdGF0dXM6IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIHByb3RlY3RlZCBfc3RhdHVzOiBOYkNvbXBvbmVudFN0YXR1cztcbiAgICByYWRpb3M6IFF1ZXJ5TGlzdDxOYlJhZGlvQ29tcG9uZW50PjtcbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29uc3RydWN0b3IoaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBwbGF0Zm9ybUlkOiBhbnksIGRvY3VtZW50OiBhbnkpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVBbmRTdWJzY3JpYmVUb1JhZGlvcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVOYW1lcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVWYWx1ZXMoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlRGlzYWJsZWQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlT25SYWRpb3NWYWx1ZUNoYW5nZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBwcm9wYWdhdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlT25SYWRpb3NCbHVyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZVN0YXR1cygpOiB2b2lkO1xufVxuIl19