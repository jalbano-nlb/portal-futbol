/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter, OnInit, Type } from '@angular/core';
import { NbCalendarCell, NbCalendarSize, NbCalendarViewMode } from '../calendar-kit/model';
import { NbDateService } from '../calendar-kit/services/date.service';
/**
 * The basis for calendar and range calendar components.
 * Encapsulates common behavior - store calendar state and perform navigation
 * between pickers.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbBaseCalendarComponent<D, T> implements OnInit {
    protected dateService: NbDateService<D>;
    /**
     * Defines if we should render previous and next months
     * in the current month view.
     * */
    boundingMonth: boolean;
    /**
     * Defines active view for calendar.
     * */
    activeViewMode: NbCalendarViewMode;
    /**
     * Minimum available date for selection.
     * */
    min: D;
    /**
     * Maximum available date for selection.
     * */
    max: D;
    /**
     * Predicate that decides which cells will be disabled.
     * */
    filter: (D: any) => boolean;
    /**
     * Custom day cell component. Have to implement `NbCalendarCell` interface.
     * */
    dayCellComponent: Type<NbCalendarCell<D, T>>;
    /**
     * Custom month cell component. Have to implement `NbCalendarCell` interface.
     * */
    monthCellComponent: Type<NbCalendarCell<D, T>>;
    /**
     * Custom year cell component. Have to implement `NbCalendarCell` interface.
     * */
    yearCellComponent: Type<NbCalendarCell<D, T>>;
    /**
     * Size of the calendar and entire components.
     * Can be 'medium' which is default or 'large'.
     * */
    size: NbCalendarSize;
    visibleDate: D;
    /**
     * Determines should we show calendars header or not.
     * */
    showHeader: boolean;
    /**
     * Value which will be rendered as selected.
     * */
    date: T;
    /**
     * Determines should we show week numbers column.
     * False by default.
     * */
    showWeekNumber: boolean;
    protected _showWeekNumber: boolean;
    /**
     * Sets symbol used as a header for week numbers column
     * */
    weekNumberSymbol: string;
    /**
     * Emits date when selected.
     * */
    dateChange: EventEmitter<T>;
    constructor(dateService: NbDateService<D>);
    ngOnInit(): void;
    readonly medium: boolean;
    readonly large: boolean;
    ViewMode: typeof NbCalendarViewMode;
    setViewMode(viewMode: NbCalendarViewMode): void;
    setVisibleDate(visibleDate: D): void;
    prevMonth(): void;
    nextMonth(): void;
    prevYears(): void;
    nextYears(): void;
    navigateToday(): void;
    private changeVisibleMonth;
    private changeVisibleYear;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbBaseCalendarComponent<any, any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbBaseCalendarComponent<any, any>, "nb-base-calendar", never, {
    "boundingMonth": "boundingMonth";
    "activeViewMode": "startView";
    "size": "size";
    "showHeader": "showHeader";
    "showWeekNumber": "showWeekNumber";
    "visibleDate": "visibleDate";
    "min": "min";
    "max": "max";
    "filter": "filter";
    "dayCellComponent": "dayCellComponent";
    "monthCellComponent": "monthCellComponent";
    "yearCellComponent": "yearCellComponent";
    "date": "date";
    "weekNumberSymbol": "weekNumberSymbol";
}, {
    "dateChange": "dateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jYWxlbmRhci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1jYWxlbmRhci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkVBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkluaXQsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iQ2FsZW5kYXJDZWxsLCBOYkNhbGVuZGFyU2l6ZSwgTmJDYWxlbmRhclZpZXdNb2RlIH0gZnJvbSAnLi4vY2FsZW5kYXIta2l0L21vZGVsJztcbmltcG9ydCB7IE5iRGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jYWxlbmRhci1raXQvc2VydmljZXMvZGF0ZS5zZXJ2aWNlJztcbi8qKlxuICogVGhlIGJhc2lzIGZvciBjYWxlbmRhciBhbmQgcmFuZ2UgY2FsZW5kYXIgY29tcG9uZW50cy5cbiAqIEVuY2Fwc3VsYXRlcyBjb21tb24gYmVoYXZpb3IgLSBzdG9yZSBjYWxlbmRhciBzdGF0ZSBhbmQgcGVyZm9ybSBuYXZpZ2F0aW9uXG4gKiBiZXR3ZWVuIHBpY2tlcnMuXG4gKiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJCYXNlQ2FsZW5kYXJDb21wb25lbnQ8RCwgVD4gaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByb3RlY3RlZCBkYXRlU2VydmljZTogTmJEYXRlU2VydmljZTxEPjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGlmIHdlIHNob3VsZCByZW5kZXIgcHJldmlvdXMgYW5kIG5leHQgbW9udGhzXG4gICAgICogaW4gdGhlIGN1cnJlbnQgbW9udGggdmlldy5cbiAgICAgKiAqL1xuICAgIGJvdW5kaW5nTW9udGg6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhY3RpdmUgdmlldyBmb3IgY2FsZW5kYXIuXG4gICAgICogKi9cbiAgICBhY3RpdmVWaWV3TW9kZTogTmJDYWxlbmRhclZpZXdNb2RlO1xuICAgIC8qKlxuICAgICAqIE1pbmltdW0gYXZhaWxhYmxlIGRhdGUgZm9yIHNlbGVjdGlvbi5cbiAgICAgKiAqL1xuICAgIG1pbjogRDtcbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGF2YWlsYWJsZSBkYXRlIGZvciBzZWxlY3Rpb24uXG4gICAgICogKi9cbiAgICBtYXg6IEQ7XG4gICAgLyoqXG4gICAgICogUHJlZGljYXRlIHRoYXQgZGVjaWRlcyB3aGljaCBjZWxscyB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqICovXG4gICAgZmlsdGVyOiAoRDogYW55KSA9PiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEN1c3RvbSBkYXkgY2VsbCBjb21wb25lbnQuIEhhdmUgdG8gaW1wbGVtZW50IGBOYkNhbGVuZGFyQ2VsbGAgaW50ZXJmYWNlLlxuICAgICAqICovXG4gICAgZGF5Q2VsbENvbXBvbmVudDogVHlwZTxOYkNhbGVuZGFyQ2VsbDxELCBUPj47XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIG1vbnRoIGNlbGwgY29tcG9uZW50LiBIYXZlIHRvIGltcGxlbWVudCBgTmJDYWxlbmRhckNlbGxgIGludGVyZmFjZS5cbiAgICAgKiAqL1xuICAgIG1vbnRoQ2VsbENvbXBvbmVudDogVHlwZTxOYkNhbGVuZGFyQ2VsbDxELCBUPj47XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHllYXIgY2VsbCBjb21wb25lbnQuIEhhdmUgdG8gaW1wbGVtZW50IGBOYkNhbGVuZGFyQ2VsbGAgaW50ZXJmYWNlLlxuICAgICAqICovXG4gICAgeWVhckNlbGxDb21wb25lbnQ6IFR5cGU8TmJDYWxlbmRhckNlbGw8RCwgVD4+O1xuICAgIC8qKlxuICAgICAqIFNpemUgb2YgdGhlIGNhbGVuZGFyIGFuZCBlbnRpcmUgY29tcG9uZW50cy5cbiAgICAgKiBDYW4gYmUgJ21lZGl1bScgd2hpY2ggaXMgZGVmYXVsdCBvciAnbGFyZ2UnLlxuICAgICAqICovXG4gICAgc2l6ZTogTmJDYWxlbmRhclNpemU7XG4gICAgdmlzaWJsZURhdGU6IEQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBzaG91bGQgd2Ugc2hvdyBjYWxlbmRhcnMgaGVhZGVyIG9yIG5vdC5cbiAgICAgKiAqL1xuICAgIHNob3dIZWFkZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVmFsdWUgd2hpY2ggd2lsbCBiZSByZW5kZXJlZCBhcyBzZWxlY3RlZC5cbiAgICAgKiAqL1xuICAgIGRhdGU6IFQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBzaG91bGQgd2Ugc2hvdyB3ZWVrIG51bWJlcnMgY29sdW1uLlxuICAgICAqIEZhbHNlIGJ5IGRlZmF1bHQuXG4gICAgICogKi9cbiAgICBzaG93V2Vla051bWJlcjogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX3Nob3dXZWVrTnVtYmVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgc3ltYm9sIHVzZWQgYXMgYSBoZWFkZXIgZm9yIHdlZWsgbnVtYmVycyBjb2x1bW5cbiAgICAgKiAqL1xuICAgIHdlZWtOdW1iZXJTeW1ib2w6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbWl0cyBkYXRlIHdoZW4gc2VsZWN0ZWQuXG4gICAgICogKi9cbiAgICBkYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgY29uc3RydWN0b3IoZGF0ZVNlcnZpY2U6IE5iRGF0ZVNlcnZpY2U8RD4pO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgbWVkaXVtOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGxhcmdlOiBib29sZWFuO1xuICAgIFZpZXdNb2RlOiB0eXBlb2YgTmJDYWxlbmRhclZpZXdNb2RlO1xuICAgIHNldFZpZXdNb2RlKHZpZXdNb2RlOiBOYkNhbGVuZGFyVmlld01vZGUpOiB2b2lkO1xuICAgIHNldFZpc2libGVEYXRlKHZpc2libGVEYXRlOiBEKTogdm9pZDtcbiAgICBwcmV2TW9udGgoKTogdm9pZDtcbiAgICBuZXh0TW9udGgoKTogdm9pZDtcbiAgICBwcmV2WWVhcnMoKTogdm9pZDtcbiAgICBuZXh0WWVhcnMoKTogdm9pZDtcbiAgICBuYXZpZ2F0ZVRvZGF5KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGFuZ2VWaXNpYmxlTW9udGg7XG4gICAgcHJpdmF0ZSBjaGFuZ2VWaXNpYmxlWWVhcjtcbn1cbiJdfQ==