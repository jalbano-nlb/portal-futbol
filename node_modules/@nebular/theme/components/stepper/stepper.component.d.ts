/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { QueryList } from '@angular/core';
import { NbStepComponent } from './step.component';
import * as ɵngcc0 from '@angular/core';
export declare type NbStepperOrientation = 'vertical' | 'horizontal';
/**
 * Stepper component
 *
 * @stacked-example(Showcase, stepper/stepper-showcase.component)
 *
 * ### Installation
 *
 * Import `NbStepperModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbStepperModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * If step label is string you can pass it as `label` attribute. Otherwise ng-template should be used:
 * ```html
 * // ...
 * <nb-stepper orientation="horizontal">
 *   <nb-step label="step number one">
 *       // ... step content here
 *   </nb-step>
 *   <nb-step label="stepLabel">
 *       <ng-template #stepLabel>
 *           <div>
 *               step number two
 *           </div>
 *       </ng-template>
 *       // ... step content here
 *   </nb-step>
 * </nb-stepper>
 * ```
 *
 * When linear mode enabled user can't move forward unless current step is complete.
 * @stacked-example(Linear, stepper/stepper-linear.component)
 *
 * Specify `[stepControl]="form"` and stepper allow go to the next step only if form is valid.
 * You can disable it via `linear` mode setting.
 * ```html
 * // ...
 * <nb-stepper  orientation="horizontal">
 *   <nb-step label="step number one" [stepControl]="form">
 *     <form [formGroup]="form">
 *       // ...
 *     </form>
 *   </nb-step>
 *    // ...
 * </nb-stepper>
 * ```
 *
 * @stacked-example(Validation, stepper/stepper-validation.component)
 *
 * Stepper component has two layout options - `vertical` & `horizontal`
 * @stacked-example(Vertical, stepper/stepper-vertical.component)
 *
 * `disableStepNavigation` disables navigation by clicking on steps, so user can navigate only using
 * 'nbStepperPrevious' and 'nbStepperNext' buttons.
 * @stacked-example(Disabled steps navigation, stepper/stepper-disabled-step-nav.component)
 *
 * @styles
 *
 * stepper-step-text-color:
 * stepper-step-text-font-family:
 * stepper-step-text-font-size:
 * stepper-step-text-font-weight:
 * stepper-step-text-line-height:
 * stepper-step-active-text-color:
 * stepper-step-completed-text-color:
 * stepper-step-index-border-color:
 * stepper-step-index-border-style:
 * stepper-step-index-border-width:
 * stepper-step-index-border-radius:
 * stepper-step-index-width:
 * stepper-step-index-active-border-color:
 * stepper-step-index-completed-background-color:
 * stepper-step-index-completed-border-color:
 * stepper-step-index-completed-text-color:
 * stepper-connector-background-color:
 * stepper-connector-completed-background-color:
 * stepper-horizontal-connector-margin:
 * stepper-vertical-connector-margin:
 * stepper-step-content-padding:
 */
export declare class NbStepperComponent {
    /**
     * Selected step index
     */
    selectedIndex: number;
    protected _selectedIndex: number;
    /**
     * Disables navigation by clicking on steps. False by default
     * @param {boolean} value
     */
    disableStepNavigation: boolean;
    protected _disableStepNavigation: boolean;
    /**
     * Selected step component
     */
    selected: NbStepComponent | undefined;
    /**
     * Stepper orientation - `horizontal`|`vertical`
     */
    orientation: NbStepperOrientation;
    /**
     * Allow moving forward only if the current step is complete
     * @default true
     */
    linear: boolean;
    protected _linear: boolean;
    readonly vertical: boolean;
    readonly horizontal: boolean;
    steps: QueryList<NbStepComponent>;
    /**
     * Navigate to next step
     * */
    next(): void;
    /**
     * Navigate to previous step
     * */
    previous(): void;
    /**
     * Reset stepper and stepControls to initial state
     * */
    reset(): void;
    isStepSelected(step: NbStepComponent): boolean;
    protected isStepValid(index: number): boolean;
    protected canBeSelected(indexToCheck: number): boolean;
    protected markCurrentStepInteracted(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbStepperComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbStepperComponent, "nb-stepper", never, {
    "orientation": "orientation";
    "selectedIndex": "selectedIndex";
    "disableStepNavigation": "disableStepNavigation";
    "selected": "selected";
    "linear": "linear";
}, {}, ["steps"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RlcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUlBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYlN0ZXBDb21wb25lbnQgfSBmcm9tICcuL3N0ZXAuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTmJTdGVwcGVyT3JpZW50YXRpb24gPSAndmVydGljYWwnIHwgJ2hvcml6b250YWwnO1xuLyoqXG4gKiBTdGVwcGVyIGNvbXBvbmVudFxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoU2hvd2Nhc2UsIHN0ZXBwZXIvc3RlcHBlci1zaG93Y2FzZS5jb21wb25lbnQpXG4gKlxuICogIyMjIEluc3RhbGxhdGlvblxuICpcbiAqIEltcG9ydCBgTmJTdGVwcGVyTW9kdWxlYCB0byB5b3VyIGZlYXR1cmUgbW9kdWxlLlxuICogYGBgdHNcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgICBOYlN0ZXBwZXJNb2R1bGUsXG4gKiAgIF0sXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIFBhZ2VNb2R1bGUgeyB9XG4gKiBgYGBcbiAqICMjIyBVc2FnZVxuICpcbiAqIElmIHN0ZXAgbGFiZWwgaXMgc3RyaW5nIHlvdSBjYW4gcGFzcyBpdCBhcyBgbGFiZWxgIGF0dHJpYnV0ZS4gT3RoZXJ3aXNlIG5nLXRlbXBsYXRlIHNob3VsZCBiZSB1c2VkOlxuICogYGBgaHRtbFxuICogLy8gLi4uXG4gKiA8bmItc3RlcHBlciBvcmllbnRhdGlvbj1cImhvcml6b250YWxcIj5cbiAqICAgPG5iLXN0ZXAgbGFiZWw9XCJzdGVwIG51bWJlciBvbmVcIj5cbiAqICAgICAgIC8vIC4uLiBzdGVwIGNvbnRlbnQgaGVyZVxuICogICA8L25iLXN0ZXA+XG4gKiAgIDxuYi1zdGVwIGxhYmVsPVwic3RlcExhYmVsXCI+XG4gKiAgICAgICA8bmctdGVtcGxhdGUgI3N0ZXBMYWJlbD5cbiAqICAgICAgICAgICA8ZGl2PlxuICogICAgICAgICAgICAgICBzdGVwIG51bWJlciB0d29cbiAqICAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgICAvLyAuLi4gc3RlcCBjb250ZW50IGhlcmVcbiAqICAgPC9uYi1zdGVwPlxuICogPC9uYi1zdGVwcGVyPlxuICogYGBgXG4gKlxuICogV2hlbiBsaW5lYXIgbW9kZSBlbmFibGVkIHVzZXIgY2FuJ3QgbW92ZSBmb3J3YXJkIHVubGVzcyBjdXJyZW50IHN0ZXAgaXMgY29tcGxldGUuXG4gKiBAc3RhY2tlZC1leGFtcGxlKExpbmVhciwgc3RlcHBlci9zdGVwcGVyLWxpbmVhci5jb21wb25lbnQpXG4gKlxuICogU3BlY2lmeSBgW3N0ZXBDb250cm9sXT1cImZvcm1cImAgYW5kIHN0ZXBwZXIgYWxsb3cgZ28gdG8gdGhlIG5leHQgc3RlcCBvbmx5IGlmIGZvcm0gaXMgdmFsaWQuXG4gKiBZb3UgY2FuIGRpc2FibGUgaXQgdmlhIGBsaW5lYXJgIG1vZGUgc2V0dGluZy5cbiAqIGBgYGh0bWxcbiAqIC8vIC4uLlxuICogPG5iLXN0ZXBwZXIgIG9yaWVudGF0aW9uPVwiaG9yaXpvbnRhbFwiPlxuICogICA8bmItc3RlcCBsYWJlbD1cInN0ZXAgbnVtYmVyIG9uZVwiIFtzdGVwQ29udHJvbF09XCJmb3JtXCI+XG4gKiAgICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJmb3JtXCI+XG4gKiAgICAgICAvLyAuLi5cbiAqICAgICA8L2Zvcm0+XG4gKiAgIDwvbmItc3RlcD5cbiAqICAgIC8vIC4uLlxuICogPC9uYi1zdGVwcGVyPlxuICogYGBgXG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShWYWxpZGF0aW9uLCBzdGVwcGVyL3N0ZXBwZXItdmFsaWRhdGlvbi5jb21wb25lbnQpXG4gKlxuICogU3RlcHBlciBjb21wb25lbnQgaGFzIHR3byBsYXlvdXQgb3B0aW9ucyAtIGB2ZXJ0aWNhbGAgJiBgaG9yaXpvbnRhbGBcbiAqIEBzdGFja2VkLWV4YW1wbGUoVmVydGljYWwsIHN0ZXBwZXIvc3RlcHBlci12ZXJ0aWNhbC5jb21wb25lbnQpXG4gKlxuICogYGRpc2FibGVTdGVwTmF2aWdhdGlvbmAgZGlzYWJsZXMgbmF2aWdhdGlvbiBieSBjbGlja2luZyBvbiBzdGVwcywgc28gdXNlciBjYW4gbmF2aWdhdGUgb25seSB1c2luZ1xuICogJ25iU3RlcHBlclByZXZpb3VzJyBhbmQgJ25iU3RlcHBlck5leHQnIGJ1dHRvbnMuXG4gKiBAc3RhY2tlZC1leGFtcGxlKERpc2FibGVkIHN0ZXBzIG5hdmlnYXRpb24sIHN0ZXBwZXIvc3RlcHBlci1kaXNhYmxlZC1zdGVwLW5hdi5jb21wb25lbnQpXG4gKlxuICogQHN0eWxlc1xuICpcbiAqIHN0ZXBwZXItc3RlcC10ZXh0LWNvbG9yOlxuICogc3RlcHBlci1zdGVwLXRleHQtZm9udC1mYW1pbHk6XG4gKiBzdGVwcGVyLXN0ZXAtdGV4dC1mb250LXNpemU6XG4gKiBzdGVwcGVyLXN0ZXAtdGV4dC1mb250LXdlaWdodDpcbiAqIHN0ZXBwZXItc3RlcC10ZXh0LWxpbmUtaGVpZ2h0OlxuICogc3RlcHBlci1zdGVwLWFjdGl2ZS10ZXh0LWNvbG9yOlxuICogc3RlcHBlci1zdGVwLWNvbXBsZXRlZC10ZXh0LWNvbG9yOlxuICogc3RlcHBlci1zdGVwLWluZGV4LWJvcmRlci1jb2xvcjpcbiAqIHN0ZXBwZXItc3RlcC1pbmRleC1ib3JkZXItc3R5bGU6XG4gKiBzdGVwcGVyLXN0ZXAtaW5kZXgtYm9yZGVyLXdpZHRoOlxuICogc3RlcHBlci1zdGVwLWluZGV4LWJvcmRlci1yYWRpdXM6XG4gKiBzdGVwcGVyLXN0ZXAtaW5kZXgtd2lkdGg6XG4gKiBzdGVwcGVyLXN0ZXAtaW5kZXgtYWN0aXZlLWJvcmRlci1jb2xvcjpcbiAqIHN0ZXBwZXItc3RlcC1pbmRleC1jb21wbGV0ZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIHN0ZXBwZXItc3RlcC1pbmRleC1jb21wbGV0ZWQtYm9yZGVyLWNvbG9yOlxuICogc3RlcHBlci1zdGVwLWluZGV4LWNvbXBsZXRlZC10ZXh0LWNvbG9yOlxuICogc3RlcHBlci1jb25uZWN0b3ItYmFja2dyb3VuZC1jb2xvcjpcbiAqIHN0ZXBwZXItY29ubmVjdG9yLWNvbXBsZXRlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogc3RlcHBlci1ob3Jpem9udGFsLWNvbm5lY3Rvci1tYXJnaW46XG4gKiBzdGVwcGVyLXZlcnRpY2FsLWNvbm5lY3Rvci1tYXJnaW46XG4gKiBzdGVwcGVyLXN0ZXAtY29udGVudC1wYWRkaW5nOlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlN0ZXBwZXJDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIFNlbGVjdGVkIHN0ZXAgaW5kZXhcbiAgICAgKi9cbiAgICBzZWxlY3RlZEluZGV4OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF9zZWxlY3RlZEluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgbmF2aWdhdGlvbiBieSBjbGlja2luZyBvbiBzdGVwcy4gRmFsc2UgYnkgZGVmYXVsdFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAgICAgKi9cbiAgICBkaXNhYmxlU3RlcE5hdmlnYXRpb246IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlU3RlcE5hdmlnYXRpb246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2VsZWN0ZWQgc3RlcCBjb21wb25lbnRcbiAgICAgKi9cbiAgICBzZWxlY3RlZDogTmJTdGVwQ29tcG9uZW50IHwgdW5kZWZpbmVkO1xuICAgIC8qKlxuICAgICAqIFN0ZXBwZXIgb3JpZW50YXRpb24gLSBgaG9yaXpvbnRhbGB8YHZlcnRpY2FsYFxuICAgICAqL1xuICAgIG9yaWVudGF0aW9uOiBOYlN0ZXBwZXJPcmllbnRhdGlvbjtcbiAgICAvKipcbiAgICAgKiBBbGxvdyBtb3ZpbmcgZm9yd2FyZCBvbmx5IGlmIHRoZSBjdXJyZW50IHN0ZXAgaXMgY29tcGxldGVcbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgbGluZWFyOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfbGluZWFyOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHZlcnRpY2FsOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhvcml6b250YWw6IGJvb2xlYW47XG4gICAgc3RlcHM6IFF1ZXJ5TGlzdDxOYlN0ZXBDb21wb25lbnQ+O1xuICAgIC8qKlxuICAgICAqIE5hdmlnYXRlIHRvIG5leHQgc3RlcFxuICAgICAqICovXG4gICAgbmV4dCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE5hdmlnYXRlIHRvIHByZXZpb3VzIHN0ZXBcbiAgICAgKiAqL1xuICAgIHByZXZpb3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVzZXQgc3RlcHBlciBhbmQgc3RlcENvbnRyb2xzIHRvIGluaXRpYWwgc3RhdGVcbiAgICAgKiAqL1xuICAgIHJlc2V0KCk6IHZvaWQ7XG4gICAgaXNTdGVwU2VsZWN0ZWQoc3RlcDogTmJTdGVwQ29tcG9uZW50KTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNTdGVwVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGNhbkJlU2VsZWN0ZWQoaW5kZXhUb0NoZWNrOiBudW1iZXIpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBtYXJrQ3VycmVudFN0ZXBJbnRlcmFjdGVkKCk6IHZvaWQ7XG59XG4iXX0=