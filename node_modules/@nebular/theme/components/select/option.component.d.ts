import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NbFocusableOption } from '../cdk/a11y/focus-key-manager';
import { NbSelectComponent } from './select.component';
import * as ɵngcc0 from '@angular/core';
export declare class NbOptionComponent<T> implements OnDestroy, NbFocusableOption {
    protected elementRef: ElementRef;
    protected cd: ChangeDetectorRef;
    protected disabledByGroup: boolean;
    /**
     * Option value that will be fired on selection.
     * */
    value: T;
    disabled: boolean;
    protected _disabled: boolean;
    /**
     * Fires value when option selection change.
     * */
    selectionChange: EventEmitter<NbOptionComponent<T>>;
    /**
     * Fires when option clicked
     */
    protected click$: Subject<NbOptionComponent<T>>;
    readonly click: Observable<NbOptionComponent<T>>;
    selected: boolean;
    protected parent: NbSelectComponent<T>;
    protected alive: boolean;
    constructor(parent: any, elementRef: ElementRef, cd: ChangeDetectorRef);
    ngOnDestroy(): void;
    /**
     * Determines should we render checkbox.
     * */
    readonly withCheckbox: boolean;
    readonly content: any;
    readonly multiple: boolean;
    readonly selectedClass: boolean;
    readonly disabledAttribute: '' | null;
    readonly tabindex: string;
    onClick(event: any): void;
    select(): void;
    deselect(): void;
    /**
     * Sets disabled by group state and marks component for check.
     */
    setDisabledByGroupState(disabled: boolean): void;
    protected setSelection(selected: boolean): void;
    focus(): void;
    getLabel(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbOptionComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbOptionComponent<any>, "nb-option", never, {
    "disabled": "disabled";
    "value": "value";
}, {
    "selectionChange": "selectionChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJvcHRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkZvY3VzYWJsZU9wdGlvbiB9IGZyb20gJy4uL2Nkay9hMTF5L2ZvY3VzLWtleS1tYW5hZ2VyJztcbmltcG9ydCB7IE5iU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi9zZWxlY3QuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iT3B0aW9uQ29tcG9uZW50PFQ+IGltcGxlbWVudHMgT25EZXN0cm95LCBOYkZvY3VzYWJsZU9wdGlvbiB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgZGlzYWJsZWRCeUdyb3VwOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbiB2YWx1ZSB0aGF0IHdpbGwgYmUgZmlyZWQgb24gc2VsZWN0aW9uLlxuICAgICAqICovXG4gICAgdmFsdWU6IFQ7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB2YWx1ZSB3aGVuIG9wdGlvbiBzZWxlY3Rpb24gY2hhbmdlLlxuICAgICAqICovXG4gICAgc2VsZWN0aW9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TmJPcHRpb25Db21wb25lbnQ8VD4+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gb3B0aW9uIGNsaWNrZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY2xpY2skOiBTdWJqZWN0PE5iT3B0aW9uQ29tcG9uZW50PFQ+PjtcbiAgICByZWFkb25seSBjbGljazogT2JzZXJ2YWJsZTxOYk9wdGlvbkNvbXBvbmVudDxUPj47XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHBhcmVudDogTmJTZWxlY3RDb21wb25lbnQ8VD47XG4gICAgcHJvdGVjdGVkIGFsaXZlOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogYW55LCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBzaG91bGQgd2UgcmVuZGVyIGNoZWNrYm94LlxuICAgICAqICovXG4gICAgcmVhZG9ubHkgd2l0aENoZWNrYm94OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNvbnRlbnQ6IGFueTtcbiAgICByZWFkb25seSBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBzZWxlY3RlZENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRpc2FibGVkQXR0cmlidXRlOiAnJyB8IG51bGw7XG4gICAgcmVhZG9ubHkgdGFiaW5kZXg6IHN0cmluZztcbiAgICBvbkNsaWNrKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHNlbGVjdCgpOiB2b2lkO1xuICAgIGRlc2VsZWN0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0cyBkaXNhYmxlZCBieSBncm91cCBzdGF0ZSBhbmQgbWFya3MgY29tcG9uZW50IGZvciBjaGVjay5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZEJ5R3JvdXBTdGF0ZShkaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNldFNlbGVjdGlvbihzZWxlY3RlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBnZXRMYWJlbCgpOiBzdHJpbmc7XG59XG4iXX0=