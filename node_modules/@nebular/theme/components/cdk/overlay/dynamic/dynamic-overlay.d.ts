import { ComponentFactoryResolver, ComponentRef, NgZone, Type } from '@angular/core';
import { Subject, BehaviorSubject, Observable } from 'rxjs';
import { NbAdjustableConnectedPositionStrategy, NbPosition } from '../overlay-position';
import { NbRenderableContainer } from '../overlay-container';
import { NbOverlayContent, NbOverlayService } from '../overlay-service';
import { NbOverlayRef, NbOverlayContainer, NbOverlayConfig } from '../mapping';
import * as ɵngcc0 from '@angular/core';
export interface NbDynamicOverlayController {
    show(): any;
    hide(): any;
    toggle(): any;
    rebuild(): any;
}
export declare class NbDynamicOverlay {
    protected overlay: NbOverlayService;
    protected componentFactoryResolver: ComponentFactoryResolver;
    protected zone: NgZone;
    protected overlayContainer: NbOverlayContainer;
    protected ref: NbOverlayRef;
    protected container: ComponentRef<NbRenderableContainer>;
    protected componentType: Type<NbRenderableContainer>;
    protected context: Object;
    protected content: NbOverlayContent;
    protected positionStrategy: NbAdjustableConnectedPositionStrategy;
    protected overlayConfig: NbOverlayConfig;
    protected lastAppliedPosition: NbPosition;
    protected positionStrategyChange$: Subject<{}>;
    protected isShown$: BehaviorSubject<boolean>;
    protected alive: boolean;
    readonly isAttached: boolean;
    readonly isShown: Observable<boolean>;
    constructor(overlay: NbOverlayService, componentFactoryResolver: ComponentFactoryResolver, zone: NgZone, overlayContainer: NbOverlayContainer);
    create(componentType: Type<NbRenderableContainer>, content: NbOverlayContent, context: Object, positionStrategy: NbAdjustableConnectedPositionStrategy, overlayConfig?: NbOverlayConfig): this;
    setContent(content: NbOverlayContent): void;
    setContext(context: Object): void;
    setContentAndContext(content: NbOverlayContent, context: Object): void;
    setComponent(componentType: Type<NbRenderableContainer>): void;
    setPositionStrategy(positionStrategy: NbAdjustableConnectedPositionStrategy): void;
    setOverlayConfig(overlayConfig: NbOverlayConfig): void;
    show(): any;
    hide(): void;
    toggle(): void;
    dispose(): void;
    getContainer(): ComponentRef<NbRenderableContainer>;
    protected createOverlay(): void;
    protected renderContainer(): void;
    protected updateContext(): void;
    protected createContainerContext(): Object;
    /**
     * Dimensions of the container may change after content update. So we listen to zone.stable event to
     * reposition the container.
     */
    protected updatePositionWhenStable(): void;
    protected hasOverlayInContainer(): boolean;
    protected disposeOverlayRef(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbDynamicOverlay>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbDynamicOverlay>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1vdmVybGF5LmQudHMiLCJzb3VyY2VzIjpbImR5bmFtaWMtb3ZlcmxheS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIE5nWm9uZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkFkanVzdGFibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5LCBOYlBvc2l0aW9uIH0gZnJvbSAnLi4vb3ZlcmxheS1wb3NpdGlvbic7XG5pbXBvcnQgeyBOYlJlbmRlcmFibGVDb250YWluZXIgfSBmcm9tICcuLi9vdmVybGF5LWNvbnRhaW5lcic7XG5pbXBvcnQgeyBOYk92ZXJsYXlDb250ZW50LCBOYk92ZXJsYXlTZXJ2aWNlIH0gZnJvbSAnLi4vb3ZlcmxheS1zZXJ2aWNlJztcbmltcG9ydCB7IE5iT3ZlcmxheVJlZiwgTmJPdmVybGF5Q29udGFpbmVyLCBOYk92ZXJsYXlDb25maWcgfSBmcm9tICcuLi9tYXBwaW5nJztcbmV4cG9ydCBpbnRlcmZhY2UgTmJEeW5hbWljT3ZlcmxheUNvbnRyb2xsZXIge1xuICAgIHNob3coKTogYW55O1xuICAgIGhpZGUoKTogYW55O1xuICAgIHRvZ2dsZSgpOiBhbnk7XG4gICAgcmVidWlsZCgpOiBhbnk7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkR5bmFtaWNPdmVybGF5IHtcbiAgICBwcm90ZWN0ZWQgb3ZlcmxheTogTmJPdmVybGF5U2VydmljZTtcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgb3ZlcmxheUNvbnRhaW5lcjogTmJPdmVybGF5Q29udGFpbmVyO1xuICAgIHByb3RlY3RlZCByZWY6IE5iT3ZlcmxheVJlZjtcbiAgICBwcm90ZWN0ZWQgY29udGFpbmVyOiBDb21wb25lbnRSZWY8TmJSZW5kZXJhYmxlQ29udGFpbmVyPjtcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50VHlwZTogVHlwZTxOYlJlbmRlcmFibGVDb250YWluZXI+O1xuICAgIHByb3RlY3RlZCBjb250ZXh0OiBPYmplY3Q7XG4gICAgcHJvdGVjdGVkIGNvbnRlbnQ6IE5iT3ZlcmxheUNvbnRlbnQ7XG4gICAgcHJvdGVjdGVkIHBvc2l0aW9uU3RyYXRlZ3k6IE5iQWRqdXN0YWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3k7XG4gICAgcHJvdGVjdGVkIG92ZXJsYXlDb25maWc6IE5iT3ZlcmxheUNvbmZpZztcbiAgICBwcm90ZWN0ZWQgbGFzdEFwcGxpZWRQb3NpdGlvbjogTmJQb3NpdGlvbjtcbiAgICBwcm90ZWN0ZWQgcG9zaXRpb25TdHJhdGVneUNoYW5nZSQ6IFN1YmplY3Q8e30+O1xuICAgIHByb3RlY3RlZCBpc1Nob3duJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+O1xuICAgIHByb3RlY3RlZCBhbGl2ZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0F0dGFjaGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzU2hvd246IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgY29uc3RydWN0b3Iob3ZlcmxheTogTmJPdmVybGF5U2VydmljZSwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHpvbmU6IE5nWm9uZSwgb3ZlcmxheUNvbnRhaW5lcjogTmJPdmVybGF5Q29udGFpbmVyKTtcbiAgICBjcmVhdGUoY29tcG9uZW50VHlwZTogVHlwZTxOYlJlbmRlcmFibGVDb250YWluZXI+LCBjb250ZW50OiBOYk92ZXJsYXlDb250ZW50LCBjb250ZXh0OiBPYmplY3QsIHBvc2l0aW9uU3RyYXRlZ3k6IE5iQWRqdXN0YWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3ksIG92ZXJsYXlDb25maWc/OiBOYk92ZXJsYXlDb25maWcpOiB0aGlzO1xuICAgIHNldENvbnRlbnQoY29udGVudDogTmJPdmVybGF5Q29udGVudCk6IHZvaWQ7XG4gICAgc2V0Q29udGV4dChjb250ZXh0OiBPYmplY3QpOiB2b2lkO1xuICAgIHNldENvbnRlbnRBbmRDb250ZXh0KGNvbnRlbnQ6IE5iT3ZlcmxheUNvbnRlbnQsIGNvbnRleHQ6IE9iamVjdCk6IHZvaWQ7XG4gICAgc2V0Q29tcG9uZW50KGNvbXBvbmVudFR5cGU6IFR5cGU8TmJSZW5kZXJhYmxlQ29udGFpbmVyPik6IHZvaWQ7XG4gICAgc2V0UG9zaXRpb25TdHJhdGVneShwb3NpdGlvblN0cmF0ZWd5OiBOYkFkanVzdGFibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5KTogdm9pZDtcbiAgICBzZXRPdmVybGF5Q29uZmlnKG92ZXJsYXlDb25maWc6IE5iT3ZlcmxheUNvbmZpZyk6IHZvaWQ7XG4gICAgc2hvdygpOiBhbnk7XG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIHRvZ2dsZSgpOiB2b2lkO1xuICAgIGRpc3Bvc2UoKTogdm9pZDtcbiAgICBnZXRDb250YWluZXIoKTogQ29tcG9uZW50UmVmPE5iUmVuZGVyYWJsZUNvbnRhaW5lcj47XG4gICAgcHJvdGVjdGVkIGNyZWF0ZU92ZXJsYXkoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyQ29udGFpbmVyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZUNvbnRleHQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY3JlYXRlQ29udGFpbmVyQ29udGV4dCgpOiBPYmplY3Q7XG4gICAgLyoqXG4gICAgICogRGltZW5zaW9ucyBvZiB0aGUgY29udGFpbmVyIG1heSBjaGFuZ2UgYWZ0ZXIgY29udGVudCB1cGRhdGUuIFNvIHdlIGxpc3RlbiB0byB6b25lLnN0YWJsZSBldmVudCB0b1xuICAgICAqIHJlcG9zaXRpb24gdGhlIGNvbnRhaW5lci5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlUG9zaXRpb25XaGVuU3RhYmxlKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGhhc092ZXJsYXlJbkNvbnRhaW5lcigpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBkaXNwb3NlT3ZlcmxheVJlZigpOiB2b2lkO1xufVxuIl19